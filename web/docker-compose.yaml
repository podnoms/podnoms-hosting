version: "3"

services:
  web-reverse-proxy:
    image: "traefik:v2.2.1"
    container_name: traefik
    restart: always
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "/opt/letsencrypt/:/letsencrypt/"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - JOKER_USERNAME=${JOKER_USERNAME}
      - JOKER_PASSWORD=${JOKER_PASSWORD}
    command:
      - "--log.level=INFO"
      - "--api=true"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--ping.entryPoint=web"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.podnoms-cert-resolver.acme.tlschallenge=true"
      # - "--certificatesresolvers.podnoms-cert-resolver.acme.dnsChallenge=true"
      - "--certificatesresolvers.podnoms-cert-resolver.acme.dnsChallenge.provider=manual"
      # - "--certificatesresolvers.podnoms-cert-resolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.podnoms-cert-resolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.podnoms-cert-resolver.acme.email=fergal.moran@gmail.com"
      - "--certificatesresolvers.podnoms-cert-resolver.acme.email=fergal.moran@gmail.com"
      - "--certificatesresolvers.podnoms-cert-resolver.acme.storage=/letsencrypt/acme.json"
    labels:
      - "traefik.http.routers.dashboard.rule=Host(`traefik.podnoms.com`)"
      - "traefik.http.routers.api.rule=Host(`traefik.podnoms.com`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/,test2:$$apr1$$d9hr9HBB$$4HxwgUir3HP4EsggP/QNo0"
      - "traefik.http.middlewares.test-redirectscheme.redirectscheme.scheme=https"
      - "traefik.http.middlewares.test-redirectscheme.redirectscheme.permanent=true"

  api:
    image: "podnoms.azurecr.io/podnoms.api"
    container_name: podnoms-api
    restart: always
    links:
      - "rabbit"
    depends_on:
      - "rabbit"
    volumes:
      - /opt/podnoms/cache/images:/wwwroot/.pn-cache
      - /opt/podnoms/data:/data
    environment:
      ASPNETCORE_URLS: http://*:80
      APPINSIGHTS_INSTRUMENTATIONKEY: ${ApplicationInsights__InstrumentationKey}
      ApplicationInsights:InstrumentationKey: ${ApplicationInsights__InstrumentationKey}
      ASPNETCORE_KeyVaultSettings__Vault: ${KeyVaultSettings__Vault}
      ASPNETCORE_KeyVaultSettings__ClientId: ${KeyVaultSettings__ClientId}
      ASPNETCORE_KeyVaultSettings__ClientSecret: ${KeyVaultSettings__ClientSecret}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.podnoms.com`,`rss.podnoms.com`, `rt.podnoms.com`,`pdnm.be`,`dl.pdnm.be`,`cdn-l.podnoms.com`,`i.pdnm.be`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=podnoms-cert-resolver"

  web:
    image: "podnoms.azurecr.io/podnoms.web"
    container_name: podnoms-web
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`www.podnoms.com`, `podnoms.com`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls.certresolver=podnoms-cert-resolver"

  pages:
    image: "podnoms.azurecr.io/podnoms.pages"
    container_name: podnoms-pages
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pages.rule=Host(`sweatoftheweek.com`, `mixes.fergl.ie`, `muziq.fergl.ie`, `pages.podnoms.com`)"
      # - "traefik.http.routers.pages.rule=Host(`*.podnoms.com`)"
      - "traefik.http.routers.pages.entrypoints=websecure"
      - "traefik.http.routers.pages.tls.certresolver=podnoms-cert-resolver"

  watchtower:
    image: containrrr/watchtower
    container_name: podnoms-watcher
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - REPO_USER=${REPO_USER}
      - REPO_PASS=${REPO_PASS}

  rabbit:
    image: "rabbitmq:management"
    container_name: podnoms-rabbit
    restart: always
    environment:
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: '-rabbit log [{file,[{file,"/var/log/rabbitmq/error.log"},{level,error},{size,10485760},{count,3}]},{console,[{enabled,false}]}]'
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: "/"
    ports:
      - 15672:15672
      - 15671:15671
      - 5672:5672

  redis:
    image: "redis"
    restart: always
    container_name: podnoms-redis
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
